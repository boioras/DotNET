@page "/"
@rendermode InteractiveServer
@using ToDoListProgram.Data
@inject ToDoListProgram.Service.UserService UserService
@inject ToDoListProgram.Data.TodoService TodoService

<PageTitle>Home</PageTitle>

<div class="container">
    @if (UserService.IsLoggedIn())
    {
        var user   = UserService.GetCurrentUser()!;
        var all    = TodoService.GetForUser(user.Id).ToList();
        var open   = all.Where(t => !t.IsCompleted)
                        .OrderBy(t => t.DueDate ?? DateTime.MaxValue)
                        .ToList();
        var done   = all.Where(t => t.IsCompleted)
                        .OrderByDescending(t => t.DueDate ?? DateTime.MaxValue)
                        .ToList();

        <h2 class="mb-3">Hello, @user.Username!</h2>

        @* --- Open Tasks --- *@
        @if (!open.Any())
        {
            <p class="text-muted">Nothing due right now – enjoy your day!</p>
        }
        else
        {
            <ul class="list-group mb-0">
                @foreach (var t in open)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center" @key="t.Id">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox"
                                checked="@t.IsCompleted"
                                @onchange="async _ => await Toggle(t)" />
                            <label class="form-check-label ms-2">@t.Title</label>
                        </div>
                        <span class="text-nowrap ms-3">@t.DueDate?.ToString("g")</span>
                    </li>
                }
            </ul>
        }

        @* --- Completed Tasks --- *@
        @if (done.Any())
        {
            <ul class="list-group mt-3">
                <li class="list-group-item list-group-item-secondary fw-bold
                        d-flex justify-content-between align-items-center">
                    <span>Completed Tasks</span>
                    <span></span>
                </li>
                @foreach (var t in done)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center" @key="t.Id">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox"
                                checked="@t.IsCompleted"
                                @onchange="async _ => await Toggle(t)" />
                            <label class="form-check-label ms-2 text-decoration-line-through text-muted">@t.Title</label>
                        </div>
                        <span class="text-nowrap ms-3">@t.DueDate?.ToString("g")</span>
                    </li>
                }
            </ul>
        }
    }
    else
    {
        <h2>Welcome to your To-Do App!</h2>
        <p>Please <a href="/login">log in</a> to see your tasks.</p>
    }
</div>

@code{
    private Func<Task>? onChangeHandler;

    protected override void OnInitialized()
    {
        onChangeHandler = () => InvokeAsync(StateHasChanged);
        UserService.OnChange += onChangeHandler;
        TodoService.OnChange += onChangeHandler;
    }

    private async Task Toggle(TodoItem item)
    {
        item.IsCompleted = !item.IsCompleted; // flags
        TodoService.Update(item); // save to disk
        await Task.CompletedTask; // keeps signature async
    }

    public void Dispose()
    {
        if (onChangeHandler != null)
        {
            UserService.OnChange -= onChangeHandler;
            TodoService.OnChange -= onChangeHandler;
        }
    }
}