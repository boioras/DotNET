@page "/"
@rendermode InteractiveServer
@using ToDoListProgram.Data
@inject ToDoListProgram.Service.UserService UserService
@inject TodoService TodoService

<PageTitle>Home</PageTitle>

<div class="container">
    @if (UserService.IsLoggedIn()) // only shows when logged in
    {
        var user = UserService.GetCurrentUser()!;
        var all = TodoService.GetForUser(user.Id).ToList();

        // Collect distinct values for dropdowns
        var categories = all.Select(t => t.Category ?? "Uncategorized").Distinct().OrderBy(c => c).ToList();
        var priorities = all.Select(t => t.Priority ?? "None").Distinct().OrderBy(p => p).ToList();

        // Apply filters, Lambda expressions
        var filtered = all
            .Where(t => string.IsNullOrWhiteSpace(SearchTerm)
                        || t.Title.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase))
            .Where(t => string.IsNullOrWhiteSpace(SelectedCategory)
                        || (t.Category ?? "Uncategorized") == SelectedCategory)
            .Where(t => string.IsNullOrWhiteSpace(SelectedPriority)
                        || (t.Priority ?? "None") == SelectedPriority)
            .ToList();

        var open = filtered
            .Where(t => !t.IsCompleted)
            .OrderBy(t => t.DueDate ?? DateTime.MaxValue)
            .ToList();

        var done = filtered
            .Where(t => t.IsCompleted)
            .OrderByDescending(t => t.DueDate ?? DateTime.MaxValue)
            .ToList();

        <h2 class="mb-3">Hello, @user.Username!</h2>

        // Search + Filters
        <div class="row g-2 align-items-center mb-3">
            <div class="col-md-6">
                <input class="form-control"
                       placeholder="Search tasks..."
                       @bind="SearchTerm"
                       @bind:event="oninput" /> <!-- instant filter -->
            </div>
            <div class="col-md-3">
                <select class="form-select" @bind="SelectedCategory">
                    <option value="">All Categories</option>
                    @foreach (var cat in categories)
                    {
                        <option value="@cat">@cat</option>
                    }
                </select>
            </div>
            <div class="col-md-3">
                <select class="form-select" @bind="SelectedPriority">
                    <option value="">All Priorities</option>
                    @foreach (var pri in priorities)
                    {
                        <option value="@pri">@pri</option>
                    }
                </select>
            </div>
        </div>

        // Open Tasks
        @if (!open.Any())
        {
            <p class="text-muted">Nothing due right now – enjoy your day!</p>
        }
        else
        {
            <ul class="list-group mb-0">
                <li class="list-group-item list-group-item-secondary fw-bold
                            d-flex justify-content-between align-items-center">
                    <span>To-do Tasks</span>
                    <span>Due Date</span>
                </li>
                @foreach (var t in open)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center flex-wrap @(IsOverdue(t) ? "overdue" : "")" @key="t.Id">
                        <div class="form-check d-flex align-items-center flex-wrap">
                            <input class="form-check-input" type="checkbox"
                                   checked="@t.IsCompleted"
                                   @onchange="async _ => await Toggle(t)" />
                            <label class="form-check-label ms-2">@t.Title</label>

                            <!-- Category and Priority badges -->
                            <span class="badge bg-secondary ms-2">@((t.Category ?? "Uncategorized"))</span>
                            <span class="badge ms-1 @(GetPriorityClass(t.Priority))">@((t.Priority ?? "None"))</span>
                            @if (IsOverdue(t))
                            {
                                <span class="badge bg-danger ms-1">Overdue</span>
                            }
                        </div>
                        <span class="text-nowrap ms-3">@t.DueDate?.ToString("g")</span>
                    </li>
                }
            </ul>
        }

        // Completed Tasks
        @if (done.Any())
        {
            <ul class="list-group mt-3">
                <li class="list-group-item list-group-item-secondary fw-bold
                            d-flex justify-content-between align-items-center">
                    <span>Completed Tasks</span>
                    <span>Due Date</span>
                </li>
                @foreach (var t in done)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center flex-wrap" @key="t.Id">
                        <div class="form-check d-flex align-items-center flex-wrap">
                            <input class="form-check-input" type="checkbox"
                                   checked="@t.IsCompleted"
                                   @onchange="async _ => await Toggle(t)" />
                            <label class="form-check-label ms-2 text-decoration-line-through text-muted">@t.Title</label>

                            <!-- Category and Priority badges -->
                            <span class="badge bg-info text-dark ms-3">@((t.Category ?? "Uncategorized"))</span>
                            <span class="badge ms-1 @(GetPriorityClass(t.Priority))">@((t.Priority ?? "None"))</span>
                        </div>
                        <span class="text-nowrap ms-3">@t.DueDate?.ToString("g")</span>
                    </li>
                }
            </ul>
        }
    }
    else
    {
        <h2>Welcome to your To-Do App!</h2>
        <p>Please <a href="/login">log in</a> to see your tasks.</p>
    }
</div>

@code {
    private Func<Task>? onChangeHandler; // callback for service 
    private string SearchTerm = string.Empty; // live search box
    private string? SelectedCategory;
    private string? SelectedPriority;

    protected override void OnInitialized()
    {
        onChangeHandler = () => InvokeAsync(StateHasChanged);
        UserService.OnChange += onChangeHandler;
        TodoService.OnChange += onChangeHandler;
    }

    private async Task Toggle(TodoItem item)
    {
        item.IsCompleted = !item.IsCompleted; // flags
        TodoService.Update(item); // save to disk
        await Task.CompletedTask; // keeps signature async
    }

    // Auto-detect overdue tasks
    private bool IsOverdue(TodoItem t) =>
        !t.IsCompleted && t.DueDate.HasValue && t.DueDate.Value < DateTime.Now;

    // For coloured priority badges
    private string GetPriorityClass(string? p) => p?.ToUpper() switch
    {
        "H" or "HIGH"   => "bg-danger",
        "M" or "MEDIUM" => "bg-warning text-dark",
        "L" or "LOW"    => "bg-success",
        _               => "bg-secondary"
    };

    // Removes the event handlers attached in OnInitialized
    public void Dispose()
    {
        if (onChangeHandler != null)
        {
            UserService.OnChange -= onChangeHandler;
            TodoService.OnChange -= onChangeHandler;
        }
    }
}