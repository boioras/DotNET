@rendermode InteractiveServer
@inject ToDoListProgram.Service.UserService UserService
@inject NavigationManager Nav

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">ToDoListProgram</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="nav flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Counter
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="weather">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Weather
            </NavLink>
        </div>

        <div class="login-section">
            @if (UserService.IsLoggedIn())
            {
                <div class="user-info text-light mb-2">
                    <strong>@UserService.GetCurrentUser()?.Username</strong>
                </div>
                <a class="nav-link text-light" href="" @onclick:preventDefault @onclick="HandleLogout">
                    <span class="bi bi-box-arrow-right"></span> Logout
                </a>
            }
            else
            {
                <NavLink class="nav-link text-light" href="login">
                    <span class="bi bi-person-circle"></span> Login
                </NavLink>
            }
        </div>
      
        <div>
            <NavLink class="nav-link" href="todo">
                <span class="oi oi-list-rich" aria-hidden="true"></span> To-Do List
            </NavLink>
        </div>
    </nav>
</div>

@code {
    private Func<Task>? onChangeHandler;

    protected override void OnInitialized()
    {
        onChangeHandler = () => InvokeAsync(StateHasChanged);
        UserService.OnChange += onChangeHandler; // state has changed
    }

    private async Task HandleLogout()
    {
        UserService.Logout();
        await Task.Delay(200);
        Nav.NavigateTo("/login", forceLoad: true); //jump to login page
    }

    public void Dispose()
    {
        if (onChangeHandler != null) UserService.OnChange -= onChangeHandler; // delete the changed state
    }
}

