@rendermode InteractiveServer
@inject ToDoListProgram.Service.UserService UserService
@inject NavigationManager Nav

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Smart ToDo</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable sidebar" onclick="document.querySelector('.navbar-toggler').click()">

    @*home,task and any need to be at top *@ 
    <nav class="nav flex-column flex-grow-1">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="tasks">
                <span class="oi oi-list" aria-hidden="true"></span> Tasks
            </NavLink>
        </div>
        @if (UserService.IsLoggedIn() && UserService.IsAdmin())
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="admin">
                    <span class="oi oi-cog" aria-hidden="true"></span> Administrate
                </NavLink>
            </div>
        }

        @*here add more at top *@ 
    </nav>

    <div class="login-section nav-bottom px-3 pt-2 border-top">
        @if (UserService.IsLoggedIn())
        {
            <div class="user-info text-light mb-2">
                <strong>@UserService.GetCurrentUser()?.Username</strong>
            </div>
            <a class="nav-link text-light px-0" href="" @onclick:preventDefault @onclick="HandleLogout">
                <span class="bi bi-box-arrow-right"></span> Logout
            </a>
        }
        else
        {
            <NavLink class="nav-link text-light px-0" href="login">
                <span class="bi bi-person-circle"></span> Login
            </NavLink>
        }
    </div>
</div>

@code {
    private Func<Task>? onChangeHandler;

    // Subscribe to user state changes
    protected override void OnInitialized()
    {
        onChangeHandler = () => InvokeAsync(StateHasChanged); // re-render on changes
        UserService.OnChange += onChangeHandler; 
    }

    // Handle user logout
    private async Task HandleLogout()
    {
        UserService.Logout();
        await Task.Delay(200);
        Nav.NavigateTo("/login", forceLoad: true); // jump to login page
    }

    // Unsubscribe from user state changes
    public void Dispose()
    {
        if (onChangeHandler != null) UserService.OnChange -= onChangeHandler; // delete the changed state
    }
}


