@page "/tasks"
@page "/tasks/{viewUserId:int}" // for admin to view other users' tasks
@rendermode InteractiveServer
@using ToDoListProgram.Data
@using ToDoListProgram.Service
@inject TodoService TodoSvc
@inject UserService UserSvc
@inject NavigationManager Nav
@inject IJSRuntime JS

<PageTitle>Tasks</PageTitle>

<h3>
    @if (viewedUser is not null)
    {
        @:@viewedUser.Username's Tasks
        @if (UserSvc.IsAdmin() && viewedUser.Id != UserSvc.GetCurrentUser()?.Id)
        {
            <span class="badge bg-primary ms-2">Admin editing mode</span>
        }
    }
</h3>

@if (user == null)
{
    <div class="alert alert-warning">Please <a href="/login">log in</a> first.</div>
}
else
{
    <!-- Add / Edit Form  -->
    <EditForm Model="@draft" OnValidSubmit="SaveTask" FormName="TaskForm" data-enhance="false">
        <!-- Validation for empty/missing fields -->
        <ValidationSummary class="alert alert-danger" />

        <div class="mb-2">
            <label>Title</label>
            <InputText @bind-Value="draft.Title" class="form-control" />
        </div>
        <div class="mb-2">
            <label>Category</label>
            <InputText @bind-Value="draft.Category" class="form-control" />
        </div>
        <div class="mb-2">
            <label>Priority</label>
            <InputSelect @bind-Value="draft.Priority" class="form-select">
                <option value="">-- choose --</option> <!-- forces selection -->
                <option value="L">Low</option>
                <option value="M">Medium</option>
                <option value="H">High</option>
            </InputSelect>
        </div>
        <div class="mb-2">
            <label>Due date</label>
            <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="draft.DueDate" class="form-control" step="1" />
        </div>

        <button class="btn btn-primary" type="submit">@(_editId == 0 ? "Add" : "Update")</button>
        @if (_editId != 0)
        {
            <button class="btn btn-secondary ms-2" @onclick="CancelEdit">Cancel</button>
        }
    </EditForm>

    <!-- TASK TABLE -->
    @if (!tasks.Any())
    {
        <p class="mt-3">No tasks yet.</p>
    }
    else
    {
        <table class="table table-striped mt-3">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Category</th>
                    <th @onclick="() => SortByPriority()" style="cursor: pointer;">
                        Priority
                        @if(sortBy == "priority")
                        {
                            <span>@(sortDescending ? "∨" : "∧")</span>
                        }    
                    </th>
                    <th @onclick="() => SortByDueDate()" style="cursor:pointer;">
                        Due
                        @if (sortBy == "due")
                        {
                            <span>@(sortDescending ? "∨" : "∧")</span>
                        }
                    </th>
                    <th>Done</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var t in tasks)
                {
                    <tr>
                        <td>@t.Title</td>
                        <td>@t.Category</td>
                        <td>@t.Priority</td>
                        <td>@(t.DueDate?.ToString("g") ?? "-")</td>
                        <td>
                            <input type="checkbox" checked="@t.IsCompleted"
                                   disabled="@readOnly"
                                   @onchange="e => ToggleDone(t)" />
                        </td>
                        <td>
                            @if (!readOnly)
                            {
                                <button class="btn btn-sm btn-warning" @onclick="() => EditTask(t)"> Edit </button>
                                <button class="btn btn-sm btn-danger ms-1" @onclick="() => DeleteTask(t.Id)"> Delete </button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    [Parameter] public int? viewUserId { get; set; } // for admin to view other users' tasks
    private User? user; // current user
    private User? viewedUser; // user whose tasks are being viewed
    private bool readOnly = false; // (read only = true) if  non-admin users view another user's tasks
    private List<TodoItem> tasks = new();
    private TodoItem draft = new() { Priority = "M", Category = "General" };
    private int _editId;
    private string sortBy = "";
    private bool sortDescending = false;

    // sort by priority: H > M > L
    private void SortByPriority()
    {
        if (sortBy == "priority")
        {
            sortDescending = !sortDescending; // reverse order
        }
        else
        {
            sortBy = "priority";
            sortDescending = true; // default to descending
        }
        tasks = tasks.OrderByDescending(t => GetPriorityValue(t.Priority)) // H > M > L
                     .ThenBy(t => t.DueDate ?? DateTime.MaxValue) // then by due date ascending
                     .ToList();
        if (!sortDescending) tasks.Reverse();
    }

    // sort by due date: nearest first
    private void SortByDueDate()
    {
        if (sortBy == "due")
        {
            sortDescending = !sortDescending;
        }
        else
        {
            sortBy = "due";
            sortDescending = false; // default to ascending
        }

        tasks = tasks
            .OrderBy(t => t.DueDate ?? DateTime.MaxValue)
            .ToList();

        if (sortDescending)
            tasks.Reverse();
    }

    // map priority string to numeric value for sorting
    private int GetPriorityValue(string? p) => p switch
    {
        "H" => 3,
        "M" => 2,
        "L" => 1,
        _ => 0
    };

    // initialization
    protected override void OnInitialized()
    {
        TodoSvc.OnChange += Refresh;   // Refresh returns Task
    }

    // handle parameter changes (e.g., viewUserId)
    protected override void OnParametersSet()
    {
        user = UserSvc.GetCurrentUser();

        if (user == null) // not logged in
        {
            viewedUser = null;
            tasks.Clear();
            return;
        }
        if (viewUserId.HasValue)
        {
            if (!UserSvc.IsAdmin())
            {
                Nav.NavigateTo("/"); // non-admins cannot view others' tasks
                return;
            }
            viewedUser = UserSvc.GetAllUsers().FirstOrDefault(u => u.Id == viewUserId.Value);
            if(viewedUser == null)
            {
                tasks.Clear();
                return; // user not found
            }
            readOnly = false; // admin can edit
        }
        else
        {
            viewedUser = user;
            readOnly = false;
        }
        LoadTasks();
    }

    // load tasks for viewed user
    private void LoadTasks()
    {
        if(viewedUser is null)
        {
            tasks.Clear();
            return;
        }
        tasks = TodoSvc.GetForUser(viewedUser.Id).ToList(); // load tasks from service
        // apply current sort
        if(sortBy == "priority")
        {
            SortByPriority();
        }
        else if(sortBy == "due")
        {
            SortByDueDate();
        }
    }

    // refresh handler for service change events
    private async Task Refresh()
    {
        await Task.Delay(50); // tiny yield so file lock releases
        await InvokeAsync(() =>
        {
            LoadTasks(); // re-read from disk
            StateHasChanged(); // repaint
        });
    }

    // Enforce 2+ chars, mandatory date/time & priority
    private async Task SaveTask()
    {
        if (readOnly || viewedUser == null) return;

        // Hard validation
        var errors = new List<string>();

        if (string.IsNullOrWhiteSpace(draft.Title) || draft.Title.Trim().Length < 2)
            errors.Add("Title must be at least 2 characters.");
        if (string.IsNullOrWhiteSpace(draft.Category))
            errors.Add("Category is required.");
        if (string.IsNullOrWhiteSpace(draft.Priority))
            errors.Add("Priority is required.");
        if (!draft.DueDate.HasValue)
            errors.Add("Due date & time are required.");

        if (errors.Any())
        {
            // Show first error in ValidationSummary and stop
            foreach (var e in errors) Console.WriteLine($"[SaveTask] {e}");
            return;
        }

        // Proceed with save
        if (_editId == 0) // Add
        {
            draft.UserId = viewedUser.Id;
            draft.Id = 0;
            TodoSvc.Add(draft);
        }
        else // Update
        {
            draft.Id = _editId;
            draft.UserId = viewedUser.Id;
            TodoSvc.Update(draft);
        }

        CancelEdit();
    }

    // start edit of existing task
    private void EditTask(TodoItem src)
    {
        if (readOnly) return; // non-admins cannot edit others' tasks

        _editId = src.Id;
        draft = new TodoItem
        {
            Id = src.Id,
            Title = src.Title,
            Category = src.Category,
            Priority = src.Priority,
            DueDate = src.DueDate,
            IsCompleted = src.IsCompleted
        };
    }

    // cancel edit
    private void CancelEdit()
    {
        _editId = 0;
        draft = new() { Priority = "M", Category = "General" };
    }

    // toggle done status
    private void ToggleDone(TodoItem t)
    {
        if (readOnly) return; // non-admins cannot edit others' tasks

        t.IsCompleted = !t.IsCompleted;
        TodoSvc.Update(t);
    }

    // delete task
    private void DeleteTask(int id)
    {
        if (readOnly) return; // non-admins cannot edit others' tasks

        TodoSvc.Delete(id);
    }

    public void Dispose() => TodoSvc.OnChange -= Refresh;
}